{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/andrzej/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "#Import necessary packages.\n",
    "\n",
    "from keras.initializers import he_uniform\n",
    "from keras.layers import Dense\n",
    "from keras.models import load_model, Sequential\n",
    "from keras.optimizers import RMSprop\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pickle\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(102442, 13217)\n"
     ]
    }
   ],
   "source": [
    "#Load functional signatures of premises.\n",
    "\n",
    "X = np.load('Fun.npy')\n",
    "\n",
    "(num_contexts, num_fun) = X.shape\n",
    "print(X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Form context distributions for each functor symbol.\n",
    "\n",
    "output_data = np.zeros((num_fun, num_fun), dtype = 'float32')\n",
    "\n",
    "for n in range(num_fun):\n",
    "    for m in range(num_contexts):\n",
    "        if X[m, n] != 0:\n",
    "            output_data[n] += X[m]\n",
    "    output_data[n] /= np.sum(output_data[n])\n",
    "    \n",
    "np.save('Output_data', output_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define input and output data.\n",
    "\n",
    "input_data = np.identity(num_fun)\n",
    "output_data = np.load('Output_data.npy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_1 (Dense)              (None, 256)               3383808   \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 13217)             3396769   \n",
      "=================================================================\n",
      "Total params: 6,780,577\n",
      "Trainable params: 6,780,577\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#Train the embedding model.\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(256, kernel_initializer = he_uniform(), activation = 'tanh', input_shape = (num_fun,)))\n",
    "model.add(Dense(num_fun, kernel_initializer = he_uniform(), activation = 'softmax'))\n",
    "model.compile(optimizer = RMSprop(decay = 1e-8), loss = 'categorical_crossentropy', metrics = ['accuracy'])\n",
    "model.summary()\n",
    "\n",
    "history = model.fit(np.identity(num_fun), output_data, epochs = 150, batch_size = 2048, shuffle = True, verbose = 0)\n",
    "\n",
    "model.save('embedding_model.h5')\n",
    "        \n",
    "with open('embedding_model_history.pickle', 'wb') as dictionary:\n",
    "    pickle.dump(history.history, dictionary, protocol=pickle.HIGHEST_PROTOCOL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f296012f198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f29c24a8fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('embedding_model_history.pickle', 'rb') as dictionary:\n",
    "            history_dict = pickle.load(dictionary)\n",
    "\n",
    "history_dict = history.history\n",
    "loss_values = history_dict['loss']\n",
    "acc_values = history_dict['acc']\n",
    "\n",
    "epochs = range(1, len(acc_values) + 1)\n",
    "\n",
    "fig = plt.figure(figsize = (12,9))\n",
    "plt.plot(epochs, loss_values, 'bo', label = 'Training loss')\n",
    "plt.title('Training loss', fontsize = 20)\n",
    "plt.xlabel('Epochs', fontsize = 16)\n",
    "plt.ylabel('Loss', fontsize = 16)\n",
    "plt.legend(fontsize = 16)\n",
    "plt.savefig('Training_loss_for_embedding_model.pdf')\n",
    "plt.show()\n",
    "\n",
    "fig = plt.figure(figsize = (12,9))\n",
    "plt.plot(epochs, acc_values, 'bo', label = 'Training accuracy')\n",
    "plt.title('Training accuracy', fontsize = 20)\n",
    "plt.xlabel('Epochs', fontsize = 16)\n",
    "plt.ylabel('Loss', fontsize = 16)\n",
    "plt.legend(fontsize = 16)\n",
    "plt.savefig('Training_accuracy_for_embedding_model.pdf')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss: 2.8874.\n",
      "Test accuracy: 83.17%.\n"
     ]
    }
   ],
   "source": [
    "#Test context distribution network.\n",
    "\n",
    "model = load_model('embedding_model.h5')\n",
    "\n",
    "test_loss, test_acc = model.evaluate(np.identity(num_fun), output_data, verbose = 0)\n",
    "print('Test loss:', str(round(test_loss, 4)) + '.')\n",
    "print('Test accuracy:', str(round(100*test_acc, 2)) + '%.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(102442, 256)\n"
     ]
    }
   ],
   "source": [
    "#Save embedded functional signatures.\n",
    "\n",
    "model = load_model('embedding_model.h5')\n",
    "\n",
    "weights = model.layers[0].get_weights()\n",
    "X = np.tanh(np.dot(X, weights[0]) + weights[1])\n",
    "print(X.shape)\n",
    "\n",
    "np.save('Conj_tokens', X[:32524])\n",
    "np.save('Ax_tokens', X[32524:])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
